== Diff: /home/haymayndz/HaymayndzAI/plan_next.py vs /home/haymayndz/AI_System_Monorepo/plan_next.py ==
--- /home/haymayndz/HaymayndzAI/plan_next.py	2025-08-22 04:47:59.914984239 +0800
+++ /home/haymayndz/AI_System_Monorepo/plan_next.py	2025-08-18 09:47:37.029584309 +0800
@@ -1,42 +1,19 @@
 #!/usr/bin/env python3
-"""Plan next-phase helper (environment-independent path auto-detection)."""
-import json, re, sys, os, subprocess, argparse
+"""Plan next-phase helper (path auto-detected)."""
+import json, re, sys
 from pathlib import Path
 from typing import List, Dict, Any, Optional, Tuple
 
-def _find_root_with_tasks(start: Path) -> Optional[Path]:
-    """Walk upwards from 'start' to locate a directory containing the plan file."""
-    cur = start.resolve()
-    while True:
-        if (cur / "memory-bank" / "queue-system" / "tasks_active.json").exists():
-            return cur
-        if cur.parent == cur:
-            break
-        cur = cur.parent
-    return None
-
 def _detect_repo_root() -> Path:
     cwd = Path.cwd()
-    # 1) Search upwards from current working directory
-    root = _find_root_with_tasks(cwd)
-    if root:
-        return root
-    # 2) Search upwards from this script's directory
-    here = Path(__file__).resolve().parent
-    root = _find_root_with_tasks(here)
-    if root:
-        return root
-    # 3) Try git repository top-level
-    try:
-        top = subprocess.check_output([
-            "git", "rev-parse", "--show-toplevel"
-        ], stderr=subprocess.DEVNULL).decode().strip()
-        root = _find_root_with_tasks(Path(top))
-        if root:
-            return root
-    except Exception:
-        pass
-    # 4) Fallback to cwd (may error later if file truly absent)
+    if (cwd / "memory-bank" / "queue-system" / "tasks_active.json").exists():
+        return cwd
+    env_root = Path(os.getenv("AI_SYSTEM_MONOREPO", "")) if os.getenv("AI_SYSTEM_MONOREPO") else None
+    if env_root and (env_root / "memory-bank" / "queue-system" / "tasks_active.json").exists():
+        return env_root
+    mainpc = Path("/home/haymayndz/AI_System_Monorepo")
+    if (mainpc / "memory-bank" / "queue-system" / "tasks_active.json").exists():
+        return mainpc
     return cwd
 
 REPO_ROOT = _detect_repo_root()
@@ -91,34 +68,6 @@
     return {"issues": issues, "missing_important_note_indices": missing_note}
 
 def main():
-    parser = argparse.ArgumentParser(description="Next-phase analyzer")
-    parser.add_argument("--mode", choices=["execution","analysis"], default="execution")
-    parser.add_argument("--gate", action="store_true", help="Check Deep Analysis Gate for a task and exit 0/3")
-    parser.add_argument("--task-id", help="Execution task id for --gate")
-    args = parser.parse_args()
-
-    global ACTIVE
-    ACTIVE = REPO_ROOT / "memory-bank" / "queue-system" / ("analysis_active.json" if args.mode=="analysis" else "tasks_active.json")
-
-    if args.gate:
-        if not args.task_id:
-            print("❌ --gate requires --task-id"); sys.exit(2)
-        try:
-            from todo_manager import enforce_deep_analysis_gate, _gate_policy  # type: ignore
-        except Exception as e:
-            print(f"❌ Cannot import gate: {e}"); sys.exit(2)
-        ok, msg = enforce_deep_analysis_gate(args.task_id)
-        if ok:
-            print(f"DEEP ANALYSIS: PASS — {msg}")
-            sys.exit(0)
-        else:
-            if _gate_policy() == "warn":
-                print(f"DEEP ANALYSIS: WARN — {msg}")
-                sys.exit(0)
-            else:
-                print(f"DEEP ANALYSIS: BLOCK — {msg}")
-                sys.exit(3)
-
     tasks = load_tasks()
     if not tasks: print("ℹ️ No active tasks."); return
     for t in tasks:
