== Diff: /home/haymayndz/HaymayndzAI/plain_hier.py vs /home/haymayndz/AI_System_Monorepo/plain_hier.py ==
--- /home/haymayndz/HaymayndzAI/plain_hier.py	2025-08-22 01:06:33.008174946 +0800
+++ /home/haymayndz/AI_System_Monorepo/plain_hier.py	2025-08-18 09:47:31.309626539 +0800
@@ -1,40 +1,18 @@
 #!/usr/bin/env python3
-"""Read-only hierarchical plan viewer (environment-independent path auto-detection)."""
-import json, sys, re, os, subprocess, argparse
+"""Read-only hierarchical plan viewer (path auto-detected)."""
+import json, sys, re
 from pathlib import Path
 
-def _find_root_with_tasks(start: Path):
-    cur = start.resolve()
-    while True:
-        if (cur / "memory-bank" / "queue-system" / "tasks_active.json").exists():
-            return cur
-        if cur.parent == cur:
-            break
-        cur = cur.parent
-    return None
-
 def _detect_repo_root() -> Path:
     cwd = Path.cwd()
-    # 1) Search upwards from current working directory
-    root = _find_root_with_tasks(cwd)
-    if root:
-        return root
-    # 2) Search upwards from this script's directory
-    here = Path(__file__).resolve().parent
-    root = _find_root_with_tasks(here)
-    if root:
-        return root
-    # 3) Try git repository top-level
-    try:
-        top = subprocess.check_output([
-            "git", "rev-parse", "--show-toplevel"
-        ], stderr=subprocess.DEVNULL).decode().strip()
-        root = _find_root_with_tasks(Path(top))
-        if root:
-            return root
-    except Exception:
-        pass
-    # 4) Fallback to cwd
+    if (cwd / "memory-bank" / "queue-system" / "tasks_active.json").exists():
+        return cwd
+    env_root = Path(os.getenv("AI_System_Monorepo", "")) if os.getenv("AI_System_Monorepo") else None
+    if env_root and (env_root / "memory-bank" / "queue-system" / "tasks_active.json").exists():
+        return env_root
+    mainpc = Path("/home/haymayndz/AI_System_Monorepo")
+    if (mainpc / "memory-bank" / "queue-system" / "tasks_active.json").exists():
+        return mainpc
     return cwd
 
 REPO_ROOT = _detect_repo_root()
@@ -47,14 +25,9 @@
     return (line or "").strip().splitlines()[0] if line else ""
 
 def main():
-    ap = argparse.ArgumentParser(description="Plain hierarchy viewer")
-    ap.add_argument("task_id")
-    ap.add_argument("--mode", choices=["execution","analysis"], default="execution")
-    args = ap.parse_args()
-
-    global ACTIVE
-    ACTIVE = REPO_ROOT / "memory-bank" / "queue-system" / ("analysis_active.json" if args.mode=="analysis" else "tasks_active.json")
-    task_id = args.task_id
+    if len(sys.argv) != 2:
+        print("usage: plan_hier.py <TASK_ID>"); sys.exit(2)
+    task_id = sys.argv[1]
     data = json.loads(ACTIVE.read_text(encoding="utf-8"))
     if isinstance(data, dict) and "tasks" in data:
         data = data["tasks"]
