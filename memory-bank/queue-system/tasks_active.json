[
  {
    "id": "final_implementation_plan_actionable_20250119",
    "description": "Actionable plan compiled from Final Implementation Plan (memory-bank/plan/organize.md) - Foundational hardening, memory subsystem remediation, QA gates, observability, security, and enforcement escalation.",
    "status": "in_progress",
    "created": "2025-01-19T10:30:00+08:00",
    "updated": "2025-08-22T20:31:39.508490+08:00",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis is the mandatory setup phase that establishes execution protocols and environment constraints for the entire implementation plan. All subsequent phases depend on these foundational protocols being understood and followed.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 0\n```\n\n**IMPORTANT NOTE:** Agent scope is execution-only; no direct file writes to queue/state files. All JSON outputs are content-only for system/operator placement. Environment variables and read-only analyzers must be used as specified. Timestamps must use Philippines timezone (+08:00). All schema validations and CI gates must pass before proceeding to next phases.",
        "done": true
      },
      {
        "text": "PHASE 1: FOUNDATIONAL HARDENING AND TOOLING SETUP\n\n**Explanations:**\nEstablish critical transitions, telemetry schema, JSON schemas, documentation SLOs, acceptance criteria, CI validation, centralized config with RBAC, waiver workflows, and disk management. This phase creates the foundational infrastructure for all subsequent work.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 1\n```\n\n**IMPORTANT NOTE:** All schemas must be versioned JSON with strict validation. Telemetry requires dual timestamps (UTC Z and +08:00). RBAC enforcement must be implemented for MEMORY_WRITES_MODE and AI_ENFORCEMENT_MODE. Documentation SLO is ≤48h update, block after 72h. All CI schema-validation jobs must pass.",
        "done": true
      },
      {
        "text": "PHASE 2: MEMORY SUBSYSTEM REMEDIATION (WITH SAFETY FLAGS)\n\n**Explanations:**\nImplement atomic I/O operations, watcher adapters, serialized updates, single-writer bridge with metrics, staged rollout of memory writes modes, disaster recovery with snapshots, and reader/watcher migration. Focus on ext4/overlayfs support with NFS explicitly unsupported.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 2\n```\n\n**IMPORTANT NOTE:** Atomic writes must include directory fsync. Staged rollout sequence: direct → atomic → dual_write → bridge (2 weeks clean before switch). Bridge must have idempotent append, monotonic sequence, durability, retries, DLQ, backpressure. DR requires defined RPO/RTO with tested restore procedures.",
        "done": false
      },
      {
        "text": "PHASE 3: QA GATE REMEDIATION AND CI HARDENING\n\n**Explanations:**\nEnforce coverage thresholds (≥90% line, ≥80% branch), implement security scanning with policy/waivers, add performance CI with acceptance criteria validation, create cross-vertical integration tests, and require 3 consecutive green CI runs before enforcement escalation.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 3\n```\n\n**IMPORTANT NOTE:** Coverage regressions >2% must fail builds. Security gates on HIGH/CRITICAL post-waiver. Performance CI must assert p95 and variance vs baseline with confidence intervals. Integration tests must cover routing matrix, orchestrator transitions, memory operations, and deployment health.",
        "done": false
      },
      {
        "text": "PHASE 4: DOCUMENTATION, DEPLOYABILITY, AND OBSERVABILITY TIGHTENING\n\n**Explanations:**\nTest critical orchestrator transitions with ≥90% coverage, implement docs provenance lint with freshness SLO enforcement, add JSON schema validation for monitoring config, enforce dual timestamp telemetry, and create observability monitors with alerts.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 4\n```\n\n**IMPORTANT NOTE:** Critical transition coverage must reach ≥90% for handlers and guards. Documentation promotion blocks after 72h SLO breach. Telemetry must enforce dual timestamps (UTC + +08:00) and X-Correlation-Id propagation. Observability alerts must tie to enforcement mode SLOs.",
        "done": false
      },
      {
        "text": "PHASE 5: ARTIFACT INTEGRITY, SBOM, AND SUPPLY CHAIN SECURITY\n\n**Explanations:**\nGenerate SPDX SBOM with sha256 digests, implement Cosign signing and attestation verification, and publish artifact digests. Focus on complete supply chain security with cryptographic verification.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 5\n```\n\n**IMPORTANT NOTE:** SBOM must be SPDX format (sbom.spdx.json) with commit SHA included. All artifacts require Cosign signatures and attestations verified in CI. Artifact digests must be published alongside build artifacts with sha256 integrity checks.",
        "done": false
      },
      {
        "text": "PHASE 6: CONCURRENCY-SAFE REPORTING AND GOVERNANCE\n\n**Explanations:**\nRoute PASS flips via bridge queue or protected mutex, apply atomic updates with directory fsync, and enforce RBAC for all governance operations with audit logging and unauthorized access alerts.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 6\n```\n\n**IMPORTANT NOTE:** All PASS flips must be serialized through bridge or mutex. Atomic updates required for VERIFICATION/master_report.md and VERIFICATION/summary.json with directory fsync. RBAC enforcement with audit to memory-bank/decisions/index.jsonl mandatory. CI must reject non-atomic writes.",
        "done": false
      },
      {
        "text": "PHASE 7: ENFORCEMENT MODE ESCALATION\n\n**Explanations:**\nProgress AI_ENFORCEMENT_MODE through staged escalation: solo → shadow → soft_block → hard_block, with emergency override capabilities using expiring signed waivers under RBAC control.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 7\n```\n\n**IMPORTANT NOTE:** Enforcement escalation requires 3 consecutive green CI runs including integration suites. Emergency overrides must use expiring, signed waivers with RBAC enforcement and complete audit logging. Hard block is final enforcement state.",
        "done": false
      },
      {
        "text": "PHASE 8: VERIFICATION AND CLOSE-OUT\n\n**Explanations:**\nRe-run verification for each vertical, update findings and reports, atomically refresh master report and summary, and when all verticals PASS with hard_block enforcement, freeze reports and publish final runbook.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id>\npython3 todo_manager.py done <task_id> 8\n```\n\n**IMPORTANT NOTE:** All verticals must flip to PASS before close-out. Atomic refresh of VERIFICATION/master_report.md and VERIFICATION/summary.json required via reporting pipeline. Final state requires hard_block enforcement with frozen reports. Runbook must include commands, rollbacks, waivers, and contacts.",
        "done": false
      }
    ]
  }
]