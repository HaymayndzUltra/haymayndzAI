[
  {
    "id": "20250810_docker_blueprint_implementation",
    "description": "Action plan to implement the new dual-machine Docker architecture, strictly following the sequence outlined in the v1.0 blueprint's Implementation Plan.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Core Behavioral Mandates:**\n1.  **Blueprint Adherence:** The 'FINAL Docker Architecture Blueprint v1.0' is the single source of truth. All actions must strictly conform to its specifications.\n2.  **Structural Fidelity:** This plan's phases are a direct 1:1 mapping of the steps in section `H. Implementation Plan`. Do not deviate from this sequence.\n3.  **Verbatim Implementation:** Preserve all specified configurations, such as file paths, environment variables (`TORCH_CUDA_ARCH_LIST`), and user/group IDs (`appuser` 10001:10001), exactly as documented.\n\n**How-To/Workflow Protocol:**\n*   **Task Management:** This plan is managed by `todo_manager.py`. Use it to track progress.\n*   **Review State:** Before starting work, run `python3 todo_manager.py show 20250810_docker_blueprint_implementation` to see the current status of all phases.\n*   **Marking Completion:** Upon successfully finishing all tasks within a phase, use the `done` command specified in that phase's 'Concluding Step' to mark it complete.\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Mark Complete):** `python3 todo_manager.py done 20250810_docker_blueprint_implementation 0`\n2.  **Analyze Next Phase:** Before proceeding, read and understand the 'Explanations' and 'Technical Artifacts / Tasks' for Phase 1.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase is the operating manual for the entire implementation. Failure to follow these protocols, especially regarding structural fidelity to the blueprint, can lead to configuration drift and failed deployments.",
        "done": false
      },
      {
        "text": "PHASE 1: Family Base Images\n\n**Explanations:**\nThis phase covers the first item from the blueprint's implementation plan: \"Build & push base-python:3.11-slim, family-web, family-torch-cu121, family-vision-cu121, family-llm-cu121, and legacy-py310-cpu.\" This involves creating the entire hierarchy defined in §B.\n\n**Technical Artifacts / Tasks:**\n1.  Create Dockerfiles for the entire base image hierarchy as specified in §B:\n    *   `base-python:3.11-slim` (debian-slim, tini, non-root `appuser`)\n    *   `base-utils`\n    *   `base-cpu-pydeps`\n    *   `family-web`\n    *   `base-gpu-cu121` (FROM `nvidia/cuda:12.1.1-runtime-ubuntu22.04`)\n    *   `family-torch-cu121`\n    *   `family-llm-cu121`\n    *   `family-vision-cu121`\n    *   `legacy-py310-cpu`\n2.  Ensure all builds use pinned, reproducible layers as per §A, including version-locked `apt` and `pip` installs with `--require-hashes`.\n3.  For all GPU images, bake in the CUDA baseline: `TORCH_CUDA_ARCH_LIST=\"89;86\"`.\n4.  Build and push all images to `ghcr.io/<org>/<family>:YYYYMMDD-<git_sha>`.\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 20250810_docker_blueprint_implementation`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 20250810_docker_blueprint_implementation 1`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Explanations' and 'Technical Artifacts / Tasks' for Phase 2.\n\n──────────────────────────────────\nIMPORTANT NOTE: All subsequent phases depend on these base images being correctly built and available in the GHCR. Any errors here will cascade.",
        "done": false
      },
      {
        "text": "PHASE 2: Dependency Audit (Audio/Vision)\n\n**Explanations:**\nThis phase corresponds to the second item in the implementation plan: \"Static code scan + ldd to enumerate required system libs (ffmpeg, libpulse, etc.); add to family-torch & family-vision only if needed.\"\n\n**Technical Artifacts / Tasks:**\n1.  Identify all services using `family-torch-cu121` and `family-vision-cu121` from the Fleet Coverage Table (§F).\n2.  For the identified services, perform a static code scan and use `ldd` to enumerate all required system-level libraries (e.g., `ffmpeg`, `libpulse`).\n3.  Update the Dockerfiles for `family-torch-cu121` and `family-vision-cu121` to add the discovered libraries via `apt-get install`.\n4.  Rebuild and push the updated `family-torch-cu121` and `family-vision-cu121` images to GHCR with a new tag.\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 20250810_docker_blueprint_implementation`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 20250810_docker_blueprint_implementation 2`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Explanations' and 'Technical Artifacts / Tasks' for Phase 3.\n\n──────────────────────────────────\nIMPORTANT NOTE: Adhere strictly to the principle of adding libraries *only if needed* to avoid unnecessary bloat in the GPU base images.",
        "done": false
      },
      {
        "text": "PHASE 3: CI Pipeline\n\n**Explanations:**\nThis phase implements the third item from the plan: \"Extend GitHub Actions: build matrix, --cache-to/from, Trivy scan (fail on HIGH/CRITICAL), SBOM upload.\"\n\n**Technical Artifacts / Tasks:**\n1.  Extend the GitHub Actions workflow to use a build matrix for `family × machine`.\n2.  Configure `docker buildx` with registry caching: `--cache-to/from type=registry,ref=ghcr.io/<org>/cache`.\n3.  Integrate a Trivy scan step into the pipeline, configured to fail the build on `HIGH` or `CRITICAL` severities.\n4.  Add a final step to the workflow to upload the image SBOM.\n5.  Ensure the pipeline injects hardware-aware defaults via `--build-arg MACHINE={mainpc|pc2}` as per §D.\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 20250810_docker_blueprint_implementation`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 20250810_docker_blueprint_implementation 3`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Explanations' and 'Technical Artifacts / Tasks' for Phase 4.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase addresses Risk R3 (Cache Quota) and R4 (Trivy false-positives). Monitor the pipeline closely after implementation and be prepared to apply the documented mitigations from §G if necessary.",
        "done": false
      },
      {
        "text": "PHASE 4: Service Migration\n\n**Explanations:**\nThis phase executes the fourth item from the implementation plan, which is broken into three sub-phases. All sub-phases must be completed to finish this phase. Supervisors will pull the newly tagged images.\n\n**Technical Artifacts / Tasks:**\n1.  **Execute Phase 1 (core infra):**\n    *   Identify all core infrastructure services from §F.\n    *   Create Dockerfiles for them following the patterns in §E.\n    *   Deploy and validate their functionality.\n2.  **Execute Phase 2 (GPU services on MainPC):**\n    *   Identify all GPU services on the 4090 machine from §F.\n    *   Create their Dockerfiles using the correct GPU base families.\n    *   Deploy and validate on the MainPC, ensuring CUDA functionality.\n3.  **Execute Phase 3 (CPU services on PC2):**\n    *   Identify all services on the 3060 machine from §F.\n    *   Create their Dockerfiles using the appropriate base families.\n    *   Deploy and validate on PC2, checking for correct hardware-aware default application (§D).\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 20250810_docker_blueprint_implementation`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 20250810_docker_blueprint_implementation 4`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Explanations' and 'Technical Artifacts / Tasks' for Phase 5.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase carries the highest operational risk. Address Risk R1 (CUDA driver mismatch) and R2 (Legacy Py 3.10 attrition) as defined in §G. Test each sub-phase deployment thoroughly before proceeding to the next.",
        "done": false
      },
      {
        "text": "PHASE 5: Observability Integration\n\n**Explanations:**\nThis phase implements the fifth item from the plan: \"Emit image SBOM + Git SHA to UnifiedObservabilityCenter at startup.\"\n\n**Technical Artifacts / Tasks:**\n1.  For every service defined in the Fleet Coverage Table (§F), modify its entrypoint script (e.g., `entrypoint.sh`).\n2.  Add commands to the script that send the image's SBOM location and the `GIT_SHA` (injected as an env var during CI) to the `UnifiedObservabilityCenter` service endpoint upon container startup.\n3.  Redeploy a sample of services (one from each family) to confirm the data is being received correctly by the `UnifiedObservabilityCenter`.\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 20250810_docker_blueprint_implementation`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 20250810_docker_blueprint_implementation 5`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Explanations' and 'Technical Artifacts / Tasks' for Phase 6.\n\n──────────────────────────────────\nIMPORTANT NOTE: This integration is key to maintaining fleet visibility. Ensure the endpoint for `UnifiedObservabilityCenter` is correctly configured and accessible from all other containers.",
        "done": false
      },
      {
        "text": "PHASE 6: Rollback Procedure\n\n**Explanations:**\nThis is the final phase, implementing the last item from the plan: \"Previous images retained with -prev tag; Supervisors can pin via env FORCE_IMAGE_TAG.\" This formalizes the operational readiness for incident response.\n\n**Technical Artifacts / Tasks:**\n1.  Update the CI/CD pipeline to automatically re-tag the currently-in-production image with a `-prev` suffix before deploying a new image tag.\n2.  Create a formal operational runbook (e.g., in the project wiki) that documents the exact procedure for rolling back a service.\n3.  The runbook must explicitly detail how to set the `FORCE_IMAGE_TAG` environment variable in the deployment configuration (e.g., Docker Compose file) to force a supervisor to pull the `-prev` tagged image.\n4.  Conduct a drill: perform a rollback on a non-critical service (e.g., `ChitchatAgent`) to validate that the procedure and documentation are correct.\n\n**Concluding Step: Plan Completion Protocol**\nTo formally conclude the entire plan and mark the implementation as complete, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 20250810_docker_blueprint_implementation`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 20250810_docker_blueprint_implementation 6`\n\n──────────────────────────────────\nIMPORTANT NOTE: The completion of this phase marks the full implementation of the blueprint. The rollback procedure is a critical safety net and must be kept up-to-date as deployment methods evolve.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T13:15:00Z",
    "updated": "2024-05-24T13:15:00Z"
  }
]