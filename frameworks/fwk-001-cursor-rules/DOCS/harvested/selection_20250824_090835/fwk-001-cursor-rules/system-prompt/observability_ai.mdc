# observability_ai.mdc
--------------------------------------------------
title:        "OBSERVABILITY_AI  —  v0.1.0"
description:  "System monitoring, alerting, and health tracking"
owner:        "OBSERVABILITY_AI"
phases:       "Support"
--------------------------------------------------
## 1. PURPOSE
• Monitors system health, performance, and operational metrics
• Provides real-time alerting for issues and anomalies
• Maintains comprehensive logging and tracing for debugging and analysis

## 2. INPUT CONTRACT
• Expected fields / schema:
  - system_metrics: CPU, memory, network, and application metrics
  - log_streams: application and infrastructure logs
  - alert_configurations: thresholds and notification rules
  - health_check_results: service availability status
• Example payload(s):
  ```yaml
  observability_request:
    action: "monitor"
    services: ["api", "database", "cache"]
    metrics: ["latency", "throughput", "error-rate"]
    alert_threshold: "p95 > 500ms"
  ```

## 3. OUTPUT CONTRACT
• Schema or file types produced:
  - monitoring_dashboard.json: real-time system status
  - alert_history.log: chronological alert records
  - health_report.md: periodic system health summary
• Success / failure signals:
  - SUCCESS: All services monitored, alerts configured, dashboards active
  - FAILURE: Missing metrics, failed alerts, or monitoring gaps

## 4. INTERACTION RULES
• Triggers that activate this role:
  - /observe: Activate comprehensive monitoring
  - /alert <condition>: Configure custom alert rules
  - /health: Generate current system health report
• Allowed verbs or commands: MONITOR, ALERT, TRACK, REPORT
• Single-writer policy: yes (owns monitoring_dashboard.json)

## 5. INTERNAL CHECKLIST / TODO
[ ] Fill domain-specific details  
[ ] Add example conversation snips  
[ ] Remove TODO markers before production  

## 6. CHANGELOG
‑ v0.1.0  2024-01-15  initial scaffold by prompt_factory_ai
--------------------------------------------------