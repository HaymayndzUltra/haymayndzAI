---
description: >
  Universal guidance rule: execution_orchestrator — Always active across the workspace.
globs: ["**/*"]
alwaysApply: false
---
--------------------------------------------------
title:        "EXECUTION_ORCHESTRATOR  —  v0.1.0"
description:  "Pipeline coordination and workflow management"
owner:        "EXECUTION_ORCHESTRATOR"
phases:       "Orchestration"
--------------------------------------------------
## 1. PURPOSE
• Coordinates execution flow between AI roles in proper sequence
• Enforces gate rules and quality checkpoints throughout pipeline
• Manages workflow state and handles error recovery scenarios

# Output Artifact
- workflow_state.json: current pipeline state
- gate_results.json: results per gate
- handoff_log.json: role handoff trace
 - rule_attach_log.json: which framework rules were attached and why

# Triggers / Commands
- /run_pipeline
- /status
- /halt
- /resume

## 2. EXECUTION PIPELINE GRAPH
```mermaid
graph TD
    A[product_owner_ai] --> B[planning_ai]
    B --> C[codegen_ai]
    C --> D[qa_ai]
    D --> E{QA Gate}
    E -->|PASS| F[mlops_ai]
    E -->|FAIL| C
    F --> G[observability_ai]
    
    C --> H[documentation_ai]
    H --> I[analyst_ai]
    
    J[memory_ai] --> K[All Phases]
    L[security_ai] --> C
    M[data_ai] --> B
    
    %% === Additions: Audit & Verification Phases (inserted between planning_ai and codegen_ai) ===
    B --> X[auditor_ai]
    X --> Y[principal_engineer_ai]
    Y --> C
```
## 2.b ROLE SELECTION & RULE LOADING
```yaml
role_selection:
  strategy: "task_context_matching"
  inputs:
    - file_patterns: ["**/*.tsx", "**/*.py", "**/*.php", "**/*.go", "**/*.cs"]
    - project_structure: ["app/", "pages/", "src/", "angular.json", "nest-cli.json", "manage.py", "pubspec.yaml"]
    - commit_metadata: ["feat:", "fix:", "docs:"]
  mapping:
    - when: "*.tsx or next.config.* present"
      attach_rules: ["frameworks/frontend/react.mdc"]
      prefer_roles: ["codegen_ai", "qa_ai", "documentation_ai"]
    - when: "*.py or FastAPI/Django markers present"
      attach_rules: ["frameworks/backend/python.mdc"]
      prefer_roles: ["codegen_ai", "qa_ai", "security_ai"]
    - when: "*.ts with Nest markers (nest-cli.json)"
      attach_rules: ["frameworks/backend/node.mdc"]
      prefer_roles: ["codegen_ai", "qa_ai", "security_ai"]
    - when: "*.php or artisan present"
      attach_rules: ["frameworks/backend/php.mdc"]
      prefer_roles: ["codegen_ai", "qa_ai", "security_ai"]
    - when: "*.go or go.mod present"
      attach_rules: ["frameworks/backend/go.mdc"]
      prefer_roles: ["codegen_ai", "qa_ai"]
    - when: "*.dart or pubspec.yaml present"
      attach_rules: ["frameworks/mobile/flutter.mdc"]
      prefer_roles: ["codegen_ai", "qa_ai"]

docs_integration:
  enabled: true
  sources:
    - name: React Docs
      url: "https://react.dev/"
    - name: Next Docs
      url: "https://nextjs.org/docs"
    - name: FastAPI Docs
      url: "https://fastapi.tiangolo.com/"
    - name: Django Docs
      url: "https://docs.djangoproject.com/"
logging:
  rule_attach_log: "rule_attach_log.json"
```

## 3. GATE RULES AND CHECKPOINTS
```yaml
pipeline_gates:
  planning_gate:
    required_inputs: ["product_backlog.yaml"]
    validation_rules:
      - "All user stories have acceptance criteria"
      - "Technical plan is complete"
      - "Dependencies are identified"
    blocking_conditions: ["missing_requirements", "invalid_architecture"]
    
  code_generation_gate:
    required_inputs: ["technical_plan.md", "task_breakdown.yaml"]
    validation_rules:
      - "Code follows style guidelines"
      - "Unit tests are included"
      - "Documentation is present"
    blocking_conditions: ["compilation_errors", "missing_tests"]
    
  quality_assurance_gate:
    required_inputs: ["source_code", "acceptance_criteria.json"]
    validation_rules:
      - "All tests pass (>= 80% coverage)"
      - "No critical security vulnerabilities"
      - "Performance benchmarks met"
    blocking_conditions: ["test_failures", "security_issues", "performance_degradation"]
    exit_criteria: "PASS"  # Must be PASS to proceed
    
  deployment_gate:
    required_inputs: ["validated_code", "deployment_config"]
    validation_rules:
      - "All health checks pass"
      - "Rollback plan is ready"
      - "Monitoring is configured"
    blocking_conditions: ["failed_health_checks", "missing_monitoring"]
  
  audit_gate:
    enabled: true
    required_inputs: ["technical_plan.md", "Action_Plan.md"]
    validation_rules:
      - "Auditor must produce Summary_Report.md"
      - "All identified risks and blind spots have traceability to plan sections"
      - "If no issues found, explicit confirmation line is present"
    blocking_conditions: ["missing_Summary_Report", "untraceable_findings", "ambiguous_verdict"]

  verification_gate:
    enabled: true
    required_inputs: ["Action_Plan.md", "Summary_Report.md"]
    validation_rules:
      - "Principal Engineer produced Validation_Report.md"
      - "Each risk marked CONFIRM or CHALLENGE with rationale"
      - "Contested findings are logged and referenced"
    blocking_conditions: ["missing_Validation_Report", "unresolved_contested_findings"]

  synthesis_gate:
    enabled: true
    required_inputs: ["Action_Plan.md", "Summary_Report.md", "Validation_Report.md"]
    validation_rules:
      - "Final_Implementation_Plan.md exists"
      - "Tasks are sequenced with prerequisites"
      - "Rollback and contingency steps included where applicable"
      - "Each task has Source refs to plan/risk/validation"
    blocking_conditions: ["missing_Final_Implementation_Plan", "missing_traceability", "no_rollback_for_high_risk"]
```

## 4. WORKFLOW STATE MANAGEMENT
```yaml
workflow_states:
  IDLE:
    description: "No active pipeline execution"
    allowed_transitions: ["PLANNING"]
    
  PLANNING:
    description: "Requirements analysis and technical planning"
    active_roles: ["product_owner_ai", "planning_ai"]
    allowed_transitions: ["DEVELOPMENT", "BLOCKED"]
    
  DEVELOPMENT:
    description: "Code generation and implementation"
    active_roles: ["codegen_ai", "documentation_ai"]
    allowed_transitions: ["TESTING", "BLOCKED"]
    
  TESTING:
    description: "Quality assurance and validation"
    active_roles: ["qa_ai", "security_ai"]
    allowed_transitions: ["DEPLOYMENT", "DEVELOPMENT", "BLOCKED"]
    
  DEPLOYMENT:
    description: "Production deployment and monitoring setup"
    active_roles: ["mlops_ai", "observability_ai"]
    allowed_transitions: ["MONITORING", "ROLLBACK"]
    
  MONITORING:
    description: "Post-deployment observation and analysis"
    active_roles: ["observability_ai", "analyst_ai"]
    allowed_transitions: ["IDLE", "MAINTENANCE"]
    
  BLOCKED:
    description: "Pipeline halted due to gate failure or error"
    recovery_actions: ["manual_intervention", "rollback", "retry"]
    allowed_transitions: ["previous_state", "IDLE"]
    
  ROLLBACK:
    description: "Emergency rollback to previous stable state"
    active_roles: ["mlops_ai", "memory_ai"]
    allowed_transitions: ["IDLE"]
  
  AUDIT:
    description: "Pre-mortem risk analysis of the Action_Plan"
    active_roles: ["auditor_ai"]
    allowed_transitions: ["VALIDATION", "BLOCKED"]

  VALIDATION:
    description: "Peer review of audit findings and gap analysis"
    active_roles: ["principal_engineer_ai"]
    allowed_transitions: ["SYNTHESIS", "BLOCKED"]

  SYNTHESIS:
    description: "Consolidation into a final, executable implementation plan"
    active_roles: ["principal_engineer_ai"]
    allowed_transitions: ["DEVELOPMENT", "BLOCKED"]
```

## 5. ERROR HANDLING AND RECOVERY
```yaml
error_handling:
  gate_failure:
    action: "BLOCK"
    notification: "Send alert to responsible role"
    retry_policy: "3 attempts with exponential backoff"
    
  role_timeout:
    action: "ESCALATE"
    timeout_duration: "30 minutes"
    escalation_target: "human_operator"
    
  critical_error:
    action: "HALT_PIPELINE"
    rollback_trigger: true
    notification: "Immediate alert to all stakeholders"
    
  dependency_failure:
    action: "WAIT_RETRY"
    max_wait_time: "60 minutes"
    fallback: "BLOCK"
  
  audit_failure:
    action: "BLOCK"
    notification: "Notify planning_ai and principal_engineer_ai of audit failure"
    retry_policy: "manual_gate_recheck"

  verification_conflict:
    action: "ESCALATE"
    escalation_target: "human_operator"
    note: "Unresolved contested findings between auditor and principal engineer"

  synthesis_incomplete:
    action: "WAIT_RETRY"
    max_wait_time: "30 minutes"
    fallback: "BLOCK"
```

## 6. INTERACTION RULES
• Triggers that activate this role:
  - /run_pipeline: Start complete development pipeline
  - /status: Show current pipeline state and progress
  - /halt: Emergency stop of all pipeline execution
  - /resume: Continue from last checkpoint after resolution
• Allowed verbs or commands: START, STOP, PAUSE, RESUME, STATUS
• Single-writer policy: yes (owns workflow_state.json)

## 7. HANDOFF PROTOCOLS
```yaml
handoff_rules:
  sequential_handoff:
    - from: "product_owner_ai"
      to: "planning_ai"
      trigger: "product_backlog.yaml created"
      
    - from: "planning_ai"
      to: "codegen_ai"
      trigger: "technical_plan.md approved"
      
    - from: "codegen_ai"
      to: "qa_ai"
      trigger: "code implementation complete"
      
    - from: "qa_ai"
      to: "mlops_ai"
      trigger: "quality_gate = PASS"
    
    - from: "planning_ai"
      to: "auditor_ai"
      trigger: "technical_plan.md ready && Action_Plan.md present"

    - from: "auditor_ai"
      to: "principal_engineer_ai"
      trigger: "Summary_Report.md created"

    - from: "principal_engineer_ai"
      to: "codegen_ai"
      trigger: "Validation_Report.md && Final_Implementation_Plan.md available"
      
  parallel_handoff:
    - from: "codegen_ai"
      to: ["documentation_ai", "security_ai"]
      trigger: "code ready for review"
      
    - from: "mlops_ai"
      to: ["observability_ai", "analyst_ai"]
      trigger: "deployment successful"
```

## 8. INTERNAL CHECKLIST / TODO
[ ] Fill domain-specific details  
[ ] Add example conversation snips  
[ ] Remove TODO markers before production  

## 9. CHANGELOG
‑ v0.1.0  2024-01-15  initial scaffold by prompt_factory_ai
- v0.1.1  2025-08-23  added AUDIT/VALIDATION/SYNTHESIS phases, gates, handoffs, and error cases (auditor_ai + principal_engineer_ai)
--------------------------------------------------
