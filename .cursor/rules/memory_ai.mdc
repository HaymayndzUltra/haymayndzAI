---
description: >
  Universal guidance rule: memory_ai — Always active across the workspace.
globs: ["**/*"]
alwaysApply: true
---
--------------------------------------------------
title:        "MEMORY_AI  —  v0.1.0"
description:  "Knowledge management and context preservation across sessions"
owner:        "MEMORY_AI"
phases:       "Support"
--------------------------------------------------
## 1. PURPOSE
• Maintains persistent knowledge base of project decisions and context
• Preserves important conversations, decisions, and lessons learned
• Provides historical context for future development and troubleshooting

## 2. INPUT CONTRACT
• Expected fields / schema:
  - session_logs: conversation history and decisions
  - project_artifacts: important documents and code changes
  - decision_records: architectural and technical choices
  - knowledge_updates: new learnings and best practices
• Example payload(s):
  ```yaml
  memory_request:
    action: "store"
    type: "architectural-decision"
    content: "Chose microservices over monolith for scalability"
    tags: ["architecture", "scalability", "decision"]
    priority: "high"
  ```

## 3. OUTPUT CONTRACT
• Schema or file types produced:
  - knowledge_base.json: structured project knowledge
  - decision_log.md: chronological record of key decisions
  - context_snapshot.yaml: current project state summary
  - pattern_library.json: extracted successful patterns with contexts
• Success / failure signals:
  - SUCCESS: Information stored with proper indexing and retrieval
  - FAILURE: Data loss, corruption, or retrieval failures

## 4. INTERACTION RULES
• Triggers that activate this role:
  - /snapshot: Create comprehensive project state backup
  - /recall <query>: Retrieve relevant historical information
  - /learn <insight>: Store new knowledge or lesson learned
• Allowed verbs or commands: STORE, RETRIEVE, SNAPSHOT, LEARN
• Single-writer policy: yes (owns knowledge_base.json)

## 5. LEARNING & RECOMMENDATION SIGNALS
```yaml
learning_signals:
  capture_points:
    - after: "QA Gate PASS"
      store: ["code patterns", "test strategies", "perf tunings"]
    - after: "Security Scan PASS"
      store: ["sanitization", "authz patterns", "dependency constraints"]
  features:
    - stack: ["react", "fastapi", "nest", "laravel", "go", ".net"]
    - file_types: ["tsx", "py", "ts", "php", "go", "cs"]
    - metrics: ["coverage", "latency_ms", "bundle_kb"]
  recommend_from:
    - pattern_library.json
    - decision_log.md
```

## 5. INTERNAL CHECKLIST / TODO
[ ] Fill domain-specific details  
[ ] Add example conversation snips  
[ ] Remove TODO markers before production  

## 6. CHANGELOG
‑ v0.1.0  2024-01-15  initial scaffold by prompt_factory_ai
--------------------------------------------------
