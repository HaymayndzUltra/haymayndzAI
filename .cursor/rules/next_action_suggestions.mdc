---
description: Automatic next-step trigger suggestions after actions
alwaysApply: true
---

## Proactive Context-Aware Engine (v2)

### High-Level Objective
Transform from reactive, framework-bound triggers to a proactive, context-aware suggestion engine that infers user intent from live workspace signals and proposes the single most relevant next action (plus one alternate) for the active task, adapting instantly to context shifts.

### Required Contextual Inputs
- Conversation signals: last messages, explicit goals, recent commands, error snippets.
- Editor context: active file path/language, cursor window (±100 lines), open tabs, unsaved state.
- Code diagnostics: LSP errors/warnings, type-checker output, linter and test failures.
- Project fingerprints: scripts/configs (e.g., package.json, pyproject.toml, go.mod), CI configs, Makefiles, task/plan files (e.g., memory-bank/queue-system/tasks_active.json).
- VCS state: branch, staged/unstaged changes, HEAD message, merge/rebase in progress.
- Recent execution: last command, exit code, duration, notable stderr lines.
- Runtime hints: detected frameworks (pytest/jest/vitest/go test), runnable entrypoints (dev servers/CLIs).
- Temporal signals: dwell time on files, rapid toggling between code/test, quick returns after failures.

### Intent Registry (extensible)
- run_tests, fix_lint, type_check, debug_failure, run_dev_server, build, run_migration,
  doc_preview, doc_lint, commit_changes, push_branch, validate_plan, run_analysis,
  run_file (current module), container_build.

### Scoring and Decision Logic
- Feature extraction: normalize signals to features (file role: test/src/doc/infra; error types: lint/type/test/build; near-cursor patterns like `it(`, `assert`).
- Weighted evidence: Hard signals (blocking errors, failing tests) > explicit user ask > file role + framework presence > VCS state > heuristics (dwell time).
- Near-cursor boost: content within cursor window counts 1.5×; recency weighting for latest events.
- Gating rules: If analysis/plan gates are active → suggest analysis/validation first. Diagnostics with errors → prioritize fix_lint/type_check before build/commit.
- Dynamic relevancy: Recompute on editor focus/diagnostics/conversation/VCS updates; instantly switch when user pivots (e.g., code → docs → infra).
- Safety fallback: If confidence < 0.65 or inputs insufficient → prefer read-only validation/preview suggestions.

### Output Contract
- Always emit literal, immediately-executable suggestions (not generic placeholders).
- Format:
  - `Suggested next trigger: <one concrete action aligned to current context>`
  - `Alternate: <closest safe neighbor>`
- Include internal fields (not printed to user UI unless requested): inferred intent, reason, confidence (0-1).

### Canonical Suggestion Mapping (non-exhaustive)
- run_tests: "Run nearest tests" | alternate "Run all tests"
- fix_lint: "Run linter with autofix" | alternate "Run type-checker"
- type_check: "Run type-checker" | alternate "Run linter with autofix"
- debug_failure: "Re-run last command with verbose logs" | alternate "Open failing log output"
- run_dev_server: "Start dev server" | alternate "Run build"
- build: "Run build" | alternate "Run tests"
- run_file: "Run current file/module" | alternate "Run project default target"
- doc_preview: "Open Markdown preview" | alternate "Run markdown lint"
- doc_lint: "Run markdown lint" | alternate "Open Markdown preview"
- commit_changes: "Commit staged changes" | alternate "Stage all and commit"
- push_branch: "Push current branch" | alternate "Create PR"
- run_analysis: "Start pre-execution analysis" | alternate "Compile analysis doc (strict)"
- validate_plan: "I-validate ang plan" | alternate "Show hierarchy"
- container_build: "Build container image" | alternate "Dockerfile lint"

### Example Scenarios (meaning-aware, beyond framework keywords)
- Emergent testing intent: Editing `tests/*` or cursor shows `describe()/it()/assert`. → Suggest "Run nearest tests"; Alternate "Run all tests".
- Live bugfix loop: Conversation says bugfix; editing target function; diagnostics show errors; unstaged changes exist. → Suggest "Run linter with autofix"; Alternate "Run type-checker".
- Documentation pass: Active file is `.md/.mdx`; no code diagnostics; markdown config detected. → Suggest "Open Markdown preview"; Alternate "Run markdown lint".
- Analysis gate active: Previous run blocked by analysis gate. → Suggest "Start pre-execution analysis"; Alternate "Compile analysis doc (strict)".
- Ambiguous/low-signal state: Minimal context available. → Suggest "I-validate ang plan"; Alternate "Show hierarchy".

### Legacy Fallback (Reactive Mappings)
If context is missing or confidence is low, the engine may fall back to the legacy reactive mappings defined below. These remain authoritative for plan-specific trigger flows.

## Post-Action Next-Step Suggestions (Required)

Goal: After every action the assistant performs (validate, show, exec, done), the assistant MUST immediately suggest the most appropriate next TRIGGER PHRASE so the user never has to search for it.

### General Policy
- Always end responses with a single-line suggestion:
  - Format: `Suggested next trigger: <trigger phrase>`
  - If multiple options are contextually valid, list the primary then an alternate on the next line starting with `Alternate:`.
- Prefer the shortest safe path that advances progress, honoring phase gates.
- Respect read-only vs side-effect actions: preview first; run only when explicitly requested or when the auto-runner is appropriate.

### Proactive Decision Engine (Signal-ranked)
- The assistant MUST evaluate output signals from the most recent action(s) before deciding the next suggestion. Signals come from tool outputs or messages (e.g., `plan_next.py`, `plain_hier.py`, `todo_manager.py exec|done`, analysis renderer):
  - Structural Gate Errors: "Phase 0 is not first", "missing IMPORTANT NOTE", "IMPORTANT NOTE: (missing)".
  - Task State: "No active tasks", tasks_active.json missing/invalid.
  - Deep Analysis Gate: "DEEP ANALYSIS: WARN", findings present, or lines mentioning "Decision Gate:" (non-blocking).
  - Analysis Mirror Linking: "No analysis found", "missing source_task_id".
  - Validation Warnings: "Completion is non-monotonic (undone after done)" (treat as inspect-first, not a hard block).
  - Plan Completeness: No next phase reported / all phases done.
  - Command Availability: next phase lacks fenced commands or preview.

- Priority Order (highest first):
  1) Safety/Danger Conditions (structural gate errors; no tasks) → Ingestion.
  2) Deep Analysis Gate warnings → Optional analysis (non-blocking).
  3) Mirror/linkage issues → Regenerate analysis mirror.
  4) Stale analysis vs execution → Regenerate analysis mirror.
  5) Unknown/ambiguous state → Validate plan (read-only), then inspect hierarchy.
  6) Normal flow → Auto-run next phase.

- Ambiguity & Safety-First Fallback:
  - If signals are insufficient or outputs are ambiguous, suggest read-only validation first: `I-validate ang plan` then `Show hierarchy`.
  - Never suggest side-effectful execution if any higher-priority signal indicates risk.

- Loop Detection & Escalation:
  - If the same gate failure repeats after remediation attempts, escalate to stricter inspection:
    - Prefer `Compile analysis doc (strict)`; if mirror missing, `Regenerate analysis mirror` first.

### Mappings by Last Action (Gate-Aware)
- After running plan validation (execution mode):
  - If output contains any structural gate errors (e.g., "Phase 0 is not first", "missing IMPORTANT NOTE", "IMPORTANT NOTE: (missing)") or "No active tasks":
    - `Suggested next trigger: "Ingest mo ang plan"`
    - `Alternate: "Compile actionable plan"`
  - If output contains "Completion is non-monotonic (undone after done)":
    - `Suggested next trigger: "Show hierarchy"`
    - `Alternate: "Execute the next unfinished phase"`
  - Else:
    - `Suggested next trigger: "Show hierarchy"`
    - `Alternate: "Execute the next unfinished phase"`

- After showing hierarchy:
  - Suggest the auto phase runner to handle preview → run → show → done → re-validate.
  - `Suggested next trigger: "Execute the next unfinished phase"`
  - If the hierarchy shows "No active tasks":
    - `Suggested next trigger: "Ingest mo ang plan"`
    - `Alternate: "Compile actionable plan"`
  - If the preview indicates missing or empty fenced commands for the next phase:
    - `Suggested next trigger: "Ingest mo ang plan"`
    - `Alternate: "Compile actionable plan"`

- After previewing a sub-step (no run):
  - Suggest running the step or returning to plan view.
  - `Suggested next trigger: "Execute the next unfinished phase"`
  - `Alternate: "I-validate ang plan"`

- After executing a sub-step (run):
  - If execution was blocked by Deep Analysis Gate:
    - If the block message contains "No analysis found" or "missing source_task_id":
      - `Suggested next trigger: "Regenerate analysis mirror"`
      - `Alternate: "Start pre-execution analysis"`
    - Else if the block includes "Decision Gate:" or analysis findings (e.g., "CONFLICT", "OVERLAP", "DUPLICATE"):
      - `Suggested next trigger: "Compile analysis doc (strict)"`
      - `Alternate: "Start pre-execution analysis"`
  - Else:
    - `Suggested next trigger: "Tapusin ang phase <K>"`
    - `Alternate: "Ano ang next phase?"`

- After marking a phase done:
  - If analysis mirror looks stale (execution progressed beyond last analysis done:true index):
    - `Suggested next trigger: "Regenerate analysis mirror"`
    - `Alternate: "Start pre-execution analysis"`
  - Else:
    - `Suggested next trigger: "I-validate ang plan"`
    - `Alternate: "Execute the next unfinished phase"`
  - If plan appears fully complete (no next phase reported by validation):
    - `Suggested next trigger: "Compile analysis doc (strict)"`
    - `Alternate: "Regenerate analysis mirror"`

- After plan ingestion is finalized (JSON approved):
  - Always refresh the analysis mirror to avoid stale gate blocks:
  - `Suggested next trigger: "Regenerate analysis mirror"`
  - `Alternate: "Start pre-execution analysis"`

- After regenerating/finalizing the analysis mirror (analysis JSON approved):
  - Proceed to gate checks before any execution:
  - `Suggested next trigger: "I-validate ang plan"`
  - `Alternate: "Show hierarchy"`

- After "Compile analysis doc (strict)":
  - If the rendered doc indicates PASS for all phases (e.g., STRICT ANALYSIS SUMMARY has no FAIL and `BLOCKERS:` is empty or `None`):
    - `Suggested next trigger: "I-validate ang plan"`
    - `Alternate: "Show hierarchy"`
  - If the rendered doc indicates BLOCK/FAIL (e.g., contains `BLOCK EXECUTION:` or any FAIL in STRICT ANALYSIS SUMMARY):
    - `Suggested next trigger: "Start pre-execution analysis"`
    - `Alternate: "Compile analysis doc (strict)"`

- After starting or running Pre-Execution Analysis:
  - If output contains "Verified and Ready for Execution":
    - `Suggested next trigger: "I-validate ang plan"`
    - `Alternate: "Show hierarchy"`
  - If any findings are present (e.g., mentions of "CONFLICT", "OVERLAP", "DUPLICATE", or non-empty findings list):
    - `Suggested next trigger: "Compile analysis doc (strict)"`
    - `Alternate: "Start pre-execution analysis"`

- After DRY RUN (simulation-only):
  - `Suggested next trigger: "I-validate ang plan"`
  - `Alternate: "Show hierarchy"`

- After listing tasks:
  - If the list shows no active tasks:
    - `Suggested next trigger: "Ingest mo ang plan"`
    - `Alternate: "Compile actionable plan"`

### Deep Analysis Awareness (if enabled)
- If a Deep Analysis Gate is in effect and currently BLOCK:
  - Suggest analysis-inspection triggers instead of execution.
  - `Suggested next trigger: "Start pre-execution analysis"`
  - `Alternate: "Compile analysis doc (strict)"`

Notes:
- Replace `<K>` with the current phase index when available.
- Keep suggestions concise; use the exact lines above without extra prose between them.

### Beginner-Friendly Flow (First-time or Unknown State)
- If new session, unknown state, or user appears unsure:
  - `Suggested next trigger: "I-validate ang plan"`
  - `Alternate: "Show hierarchy"`
- If plan validation reports "No active tasks" or tasks file missing/invalid:
  - `Suggested next trigger: "Ingest mo ang plan"`
  - `Alternate: "Compile actionable plan"`
- If user asks for help or “paano gamitin”:
  - `Suggested next trigger: "Show hierarchy"`
  - `Alternate: "Ano ang next phase?"`

### Error-to-Trigger Mapping (Operational)
- On preview/run: "Invalid phase index" or "Command index out of range":
  - `Suggested next trigger: "Show hierarchy"`
  - `Alternate: "I-validate ang plan"`
- "No fenced code block found" or "No executable lines found":
  - `Suggested next trigger: "Ingest mo ang plan"`
  - `Alternate: "Compile actionable plan"`
- Deep Analysis Gate: "No analysis found" / "missing source_task_id":
  - `Suggested next trigger: "Regenerate analysis mirror"`
  - `Alternate: "Start pre-execution analysis"`
- Deep Analysis Gate: "missing 'Decision Gate' or 'IMPORTANT NOTE:'":
  - `Suggested next trigger: "Compile analysis doc (strict)"`
  - `Alternate: "Start pre-execution analysis"`
- Deep Analysis Gate: blocking findings (Conflict/Duplicate):
  - `Suggested next trigger: "Compile analysis doc (strict)"`
  - `Alternate: "Start pre-execution analysis"`
- Command execution non-zero exit (runtime error):
  - `Suggested next trigger: "I-validate ang plan"`
  - `Alternate: "Show hierarchy"`

### Slash-Command Integration (If Enabled)
- After `/backlog`:
  - `Suggested next trigger: " /plan"`
  - `Alternate: "I-validate ang plan"`
- After `/plan` creates/updates tasks:
  - `Suggested next trigger: "I-validate ang plan"`
  - `Alternate: "Execute the next unfinished phase"`
- After `/gen_code`, `/test`, `/deploy` produce artifacts:
  - `Suggested next trigger: "I-validate ang plan"`
  - `Alternate: "Show hierarchy"`

### Placeholder Autofill Guidance
- When the next action requires `<TASK_ID>`, `<K>` or `<K.N>` and values are unknown:
  - `Suggested next trigger: "Show hierarchy"`
  - `Alternate: "I-validate ang plan"`
- The assistant MAY include resolved placeholders automatically if the latest context reveals them (avoid asking the user).

### Language Aliases (Helpful for New Users)
- Validate plan: `"I-validate ang plan"` | `"Validate plan"`
- Show hierarchy: `"Show hierarchy"` | `"Ipakita ang plano"`
- Execute next: `"Execute the next unfinished phase"` | `"Ituloy ang susunod na phase"`
- Start analysis: `"Start pre-execution analysis"` | `"Simulan ang analysis"`

### Session / Resume Mapping
- After reconnect or unclear session status:
  - `Suggested next trigger: "I-validate ang plan"`
  - `Alternate: "Show hierarchy"`

